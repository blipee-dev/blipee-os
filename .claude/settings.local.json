{
  "permissions": {
    "allow": [
      "Bash(rm:*)",
      "Bash(mkdir:*)",
      "Bash(chmod:*)",
      "Bash(node:*)",
      "Bash(npx create-next-app:*)",
      "Bash(mv:*)",
      "Bash(npm install)",
      "Bash(npm run build:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(true)",
      "Bash(npm run dev:*)",
      "Bash(grep:*)",
      "Bash(npm install:*)",
      "Bash(git tag:*)",
      "Bash(npx tsc:*)",
      "Bash(npx eslint:*)",
      "Bash(npx tsx:*)",
      "Bash(npm run env:*)",
      "Bash(ls:*)",
      "Bash(npx supabase db reset:*)",
      "Bash(rg:*)",
      "Bash(find:*)",
      "Bash(npm run test:apis:*)",
      "Bash(npm run lint)",
      "Bash(sed:*)",
      "Bash(npx prettier:*)",
      "Bash(npm run type-check:*)",
      "Bash(npm run format:*)",
      "Bash(gh codespace ports:*)",
      "Bash(kill:*)",
      "Bash(npx supabase db remote get:*)",
      "Bash(npx supabase:*)",
      "Bash(SUPABASE_DB_PASSWORD=\"\" npx supabase db push --password \"\")",
      "Bash(curl:*)",
      "Bash(echo \"Dashboard URL: https://$CODESPACE_NAME-3000.app.github.dev/dashboard\")",
      "Bash(pkill:*)",
      "Bash(echo:*)",
      "Bash(gh auth:*)",
      "Bash(unset GITHUB_TOKEN)",
      "Bash(claude-code install-github-app)",
      "Bash(claude install-github-app)",
      "Bash(/install-github-app)",
      "Bash(npm ls:*)",
      "Bash(touch:*)",
      "Bash(export SUPABASE_DB_PASSWORD=\"postgresblipeeos\")",
      "Bash(SUPABASE_DB_PASSWORD=postgresblipeeos node scripts/check-migration-status.js)",
      "Bash(SUPABASE_DB_PASSWORD=postgresblipeeos node scripts/test-migration-safe.js)",
      "Bash(SUPABASE_DB_PASSWORD=postgresblipeeos npx supabase db push --include \"023_incremental_improvements.sql\")",
      "Bash(SUPABASE_DB_PASSWORD=postgresblipeeos npx supabase db push --password postgresblipeeos)",
      "Bash(SUPABASE_DB_PASSWORD=postgresblipeeos npx supabase migration list --password postgresblipeeos)",
      "Bash(SUPABASE_DB_PASSWORD=postgresblipeeos npx supabase db push --password postgresblipeeos --dry-run)",
      "Bash(cat:*)",
      "WebFetch(domain:supabase.com)",
      "Bash(tree:*)",
      "Bash(/workspaces/blipee-os/scripts/fix-audit-calls.sh:*)",
      "Bash(docker-compose up:*)",
      "Bash(docker compose:*)",
      "Bash(docker:*)",
      "Bash(sudo sh:*)",
      "Bash(sudo systemctl start:*)",
      "Bash(sudo systemctl:*)",
      "Bash(sudo service:*)",
      "Bash(sudo usermod:*)",
      "Bash(sudo docker compose:*)",
      "Bash(sudo docker:*)",
      "Bash(./check_deleted_at.sh:*)",
      "Bash(npm run test:coverage:*)",
      "Bash(npm run test:*)",
      "Bash(./run-partial-coverage.sh:*)",
      "Bash(npm run cypress:run:*)",
      "Bash(npm run:*)",
      "Bash(npx cypress run:*)",
      "Bash(npm test:*)",
      "Bash(npx jest:*)",
      "Bash(./scripts/achieve-fortune10-coverage.sh:*)",
      "Bash(./scripts/run-fortune10-tests.sh:*)",
      "Bash(scripts/achieve-fortune10-coverage.sh:*)",
      "Bash(PGPASSWORD=postgresblipeeos psql -h aws-0-eu-west-3.pooler.supabase.com -p 5432 -U postgres.quovvwrwyfkzhgqdeham -d postgres -f scripts/check-rls-policies.sql)",
      "Bash(NEXT_PUBLIC_SUPABASE_URL=https://quovvwrwyfkzhgqdeham.supabase.co NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InF1b3Z2d3J3eWZremhncWRlaGFtIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE4MjkyMjIsImV4cCI6MjA2NzQwNTIyMn0._w2Ofr8W1Oouka_pNbFbdkzDX9Rge_MoY5JQq3zcz6A node scripts/test-stream-d-network.js)",
      "Bash(NEXT_PUBLIC_SUPABASE_URL=https://quovvwrwyfkzhgqdeham.supabase.co NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InF1b3Z2d3J3eWZremhncWRlaGFtIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE4MjkyMjIsImV4cCI6MjA2NzQwNTIyMn0._w2Ofr8W1Oouka_pNbFbdkzDX9Rge_MoY5JQq3zcz6A node -e \"\nconst { createClient } = require(''@supabase/supabase-js'');\nconst supabase = createClient(process.env.NEXT_PUBLIC_SUPABASE_URL, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY);\n\nasync function checkSchema() {\n  // Check organizations table structure\n  const { data, error } = await supabase.from(''organizations'').select(''*'').limit(1);\n  console.log(''Organizations query result:'', { data, error });\n  \n  // Test simple insert\n  const { data: insertData, error: insertError } = await supabase\n    .from(''organizations'')\n    .insert({ name: ''Test Org'', slug: ''test-org-'' + Date.now() })\n    .select();\n  console.log(''Insert result:'', { data: insertData, error: insertError });\n}\n\ncheckSchema();\n\")",
      "Bash(git clone:*)",
      "Bash(./tests/api/test-endpoints.sh:*)",
      "Bash(git rm:*)",
      "Bash(vercel ls:*)",
      "Bash(./scripts/deploy-to-existing-vercel.sh:*)",
      "Bash(NODE_ENV=production npx next build)",
      "Bash(vercel:*)",
      "Bash(./update-telegram-webhook.sh:*)",
      "Bash(PGPASSWORD=vkS1yz3A8tH3jvnp npx supabase db push --password vkS1yz3A8tH3jvnp)",
      "Bash(/workspaces/blipee-os/verify-deployment.sh:*)"
    ],
    "deny": []
  }
}