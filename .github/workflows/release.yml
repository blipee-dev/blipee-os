name: Release Management

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run type-check

      - name: Lint check
        run: npm run lint

      - name: Build check
        run: npm run build

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'workflow_dispatch'
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      changelog_entry: ${{ steps.changelog.outputs.changelog_entry }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Bump version
        id: version
        run: |
          npm version ${{ github.event.inputs.version_type }} --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Generate changelog entry
        id: changelog
        run: |
          node scripts/update-changelog.js --auto --version=${{ steps.version.outputs.new_version }}
          CHANGELOG_ENTRY=$(sed -n '/^## \[/,/^## \[/p' CHANGELOG.md | head -n -1)
          echo "changelog_entry<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_ENTRY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Commit changes
        run: |
          git add package.json CHANGELOG.md
          git commit -m "chore: release v${{ steps.version.outputs.new_version }}"
          git tag -a "v${{ steps.version.outputs.new_version }}" -m "Release v${{ steps.version.outputs.new_version }}"

      - name: Push changes
        run: |
          git push origin main
          git push origin "v${{ steps.version.outputs.new_version }}"

  publish-release:
    name: Publish GitHub Release
    runs-on: ubuntu-latest
    needs: [test, create-release]
    if: always() && (needs.create-release.result == 'success' || startsWith(github.ref, 'refs/tags/v'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ needs.create-release.outputs.new_version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Extract changelog
        id: changelog
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            CHANGELOG_ENTRY="${{ needs.create-release.outputs.changelog_entry }}"
          else
            # Extract changelog entry for this version
            VERSION="${{ steps.get_version.outputs.version }}"
            CHANGELOG_ENTRY=$(sed -n "/^## \[$VERSION\]/,/^## \[/p" CHANGELOG.md | head -n -1)
          fi
          echo "changelog_entry<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_ENTRY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: "Blipee OS v${{ steps.get_version.outputs.version }}"
          body: |
            ${{ steps.changelog.outputs.changelog_entry }}
            
            ## ðŸš€ Deployment
            This release is automatically deployed to production:
            - **Live Demo**: https://blipee-os.vercel.app
            - **Documentation**: https://github.com/blipee-dev/blipee-os#readme
            
            ## ðŸ“¦ Installation
            ```bash
            git clone https://github.com/blipee-dev/blipee-os.git
            cd blipee-os
            npm install
            npm run dev
            ```
            
            ## ðŸ”— Links
            - [Full Changelog](https://github.com/blipee-dev/blipee-os/blob/main/CHANGELOG.md)
            - [Documentation](https://github.com/blipee-dev/blipee-os/blob/main/CLAUDE.md)
            - [Implementation Summary](https://github.com/blipee-dev/blipee-os/blob/main/docs/IMPLEMENTATION_SUMMARY.md)
          draft: false
          prerelease: false

  deploy-notification:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [publish-release]
    if: always() && needs.publish-release.result == 'success'
    steps:
      - name: Deployment Success
        run: |
          echo "ðŸŽ‰ Release published successfully!"
          echo "ðŸ“¦ Version: ${{ needs.create-release.outputs.new_version || github.ref_name }}"
          echo "ðŸš€ Live at: https://blipee-os.vercel.app"