9ced6b8ce6b4f9a2a707369c7b3e3320
// Jest setup file for security tests
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _globals = require("@jest/globals");
// Mock environment variables
process.env.NODE_ENV = "test";
process.env.NEXT_PUBLIC_SUPABASE_URL = "https://test.supabase.co";
process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY = "test-anon-key";
process.env.SUPABASE_SERVICE_ROLE_KEY = "test-service-role-key";
process.env.ENCRYPTION_PROVIDER = "local";
process.env.KEY_STORE_PATH = "./.test-keys";
// Mock Web APIs that aren't available in Node.js
global.crypto = {
    randomUUID: ()=>"test-uuid-" + Math.random().toString(36).substr(2, 9),
    randomBytes: (size)=>Buffer.alloc(size, 0),
    getRandomValues: (array)=>{
        for(let i = 0; i < array.length; i++){
            array[i] = Math.floor(Math.random() * 256);
        }
        return array;
    }
};
// Mock fetch for API calls
global.fetch = _globals.jest.fn();
// Mock performance API
global.performance = {
    now: _globals.jest.fn(()=>Date.now()),
    mark: _globals.jest.fn(),
    measure: _globals.jest.fn(),
    getEntriesByName: _globals.jest.fn(()=>[]),
    getEntriesByType: _globals.jest.fn(()=>[]),
    clearMarks: _globals.jest.fn(),
    clearMeasures: _globals.jest.fn()
};
// Mock WebAuthn APIs
global.navigator = {
    ...global.navigator,
    credentials: {
        create: _globals.jest.fn(),
        get: _globals.jest.fn()
    }
};
// Mock console methods to reduce noise in tests
const originalConsoleError = console.error;
const originalConsoleWarn = console.warn;
console.error = _globals.jest.fn((...args)=>{
    // Only show errors that aren't expected test errors
    if (!args[0]?.includes?.("expected test error")) {
        originalConsoleError(...args);
    }
});
console.warn = _globals.jest.fn((...args)=>{
    // Only show warnings that aren't expected test warnings
    if (!args[0]?.includes?.("expected test warning")) {
        originalConsoleWarn(...args);
    }
});
// Mock Buffer for base64 operations
if (typeof Buffer === "undefined") {
    global.Buffer = require("buffer").Buffer;
}
// Mock TextEncoder/TextDecoder for WebAuthn
if (typeof TextEncoder === "undefined") {
    global.TextEncoder = require("util").TextEncoder;
}
if (typeof TextDecoder === "undefined") {
    global.TextDecoder = require("util").TextDecoder;
}
// Mock btoa/atob for base64 operations
if (typeof btoa === "undefined") {
    global.btoa = (str)=>Buffer.from(str, "binary").toString("base64");
}
if (typeof atob === "undefined") {
    global.atob = (str)=>Buffer.from(str, "base64").toString("binary");
}
// Cleanup after each test
afterEach(()=>{
    _globals.jest.clearAllMocks();
});
// Global test timeout
_globals.jest.setTimeout(10000);
// Handle unhandled promise rejections
process.on("unhandledRejection", (reason, promise)=>{
    console.error("Unhandled Rejection at:", promise, "reason:", reason);
// Optionally exit the process
// process.exit(1);
});
// Mock Redis for testing
_globals.jest.mock("ioredis", ()=>{
    return {
        default: _globals.jest.fn(()=>({
                get: _globals.jest.fn(),
                set: _globals.jest.fn(),
                del: _globals.jest.fn(),
                incr: _globals.jest.fn(),
                expire: _globals.jest.fn(),
                ttl: _globals.jest.fn(),
                pipeline: _globals.jest.fn(()=>({
                        get: _globals.jest.fn(),
                        set: _globals.jest.fn(),
                        incr: _globals.jest.fn(),
                        expire: _globals.jest.fn(),
                        exec: _globals.jest.fn(()=>Promise.resolve([]))
                    })),
                disconnect: _globals.jest.fn()
            }))
    };
});
// Mock bcrypt for password hashing
_globals.jest.mock("bcryptjs", ()=>({
        hash: _globals.jest.fn((password, rounds)=>Promise.resolve(`hashed_${password}_${rounds}`)),
        compare: _globals.jest.fn((password, hash)=>Promise.resolve(hash.includes(password))),
        genSalt: _globals.jest.fn((rounds)=>Promise.resolve(`salt_${rounds}`))
    }));
// Mock speakeasy for TOTP
_globals.jest.mock("speakeasy", ()=>({
        generateSecret: _globals.jest.fn(()=>({
                ascii: "test-secret",
                base32: "TESTSECRET123456",
                hex: "test-hex"
            })),
        totp: _globals.jest.fn(()=>"123456"),
        time: _globals.jest.fn(()=>({
                T: 123456
            }))
    }));
// Mock qrcode for QR code generation
_globals.jest.mock("qrcode", ()=>({
        toDataURL: _globals.jest.fn((data)=>Promise.resolve(`data:image/png;base64,${Buffer.from(data).toString("base64")}`))
    }));
// Mock file system operations
_globals.jest.mock("fs", ()=>({
        ..._globals.jest.requireActual("fs"),
        existsSync: _globals.jest.fn(()=>true),
        mkdirSync: _globals.jest.fn(),
        writeFileSync: _globals.jest.fn(),
        readFileSync: _globals.jest.fn(()=>Buffer.from("mock-file-content")),
        rmSync: _globals.jest.fn(),
        readdirSync: _globals.jest.fn(()=>[
                "key1.pem",
                "key2.pem"
            ])
    }));
const _default = undefined;

//# sourceMappingURL=data:application/json;base64,