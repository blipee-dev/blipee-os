{"version":3,"sources":["/workspaces/blipee-os/jest.setup.js"],"sourcesContent":["// Jest setup file for security tests\nimport { jest } from '@jest/globals';\n\n// Mock environment variables\nprocess.env.NODE_ENV = 'test';\nprocess.env.NEXT_PUBLIC_SUPABASE_URL = 'https://test.supabase.co';\nprocess.env.NEXT_PUBLIC_SUPABASE_ANON_KEY = 'test-anon-key';\nprocess.env.SUPABASE_SERVICE_ROLE_KEY = 'test-service-role-key';\nprocess.env.ENCRYPTION_PROVIDER = 'local';\nprocess.env.KEY_STORE_PATH = './.test-keys';\n\n// Mock Web APIs that aren't available in Node.js\nglobal.crypto = {\n  randomUUID: () => 'test-uuid-' + Math.random().toString(36).substr(2, 9),\n  randomBytes: (size) => Buffer.alloc(size, 0),\n  getRandomValues: (array) => {\n    for (let i = 0; i < array.length; i++) {\n      array[i] = Math.floor(Math.random() * 256);\n    }\n    return array;\n  },\n};\n\n// Mock fetch for API calls\nglobal.fetch = jest.fn();\n\n// Mock performance API\nglobal.performance = {\n  now: jest.fn(() => Date.now()),\n  mark: jest.fn(),\n  measure: jest.fn(),\n  getEntriesByName: jest.fn(() => []),\n  getEntriesByType: jest.fn(() => []),\n  clearMarks: jest.fn(),\n  clearMeasures: jest.fn(),\n};\n\n// Mock WebAuthn APIs\nglobal.navigator = {\n  ...global.navigator,\n  credentials: {\n    create: jest.fn(),\n    get: jest.fn(),\n  },\n};\n\n// Mock console methods to reduce noise in tests\nconst originalConsoleError = console.error;\nconst originalConsoleWarn = console.warn;\n\nconsole.error = jest.fn((...args) => {\n  // Only show errors that aren't expected test errors\n  if (!args[0]?.includes?.('expected test error')) {\n    originalConsoleError(...args);\n  }\n});\n\nconsole.warn = jest.fn((...args) => {\n  // Only show warnings that aren't expected test warnings\n  if (!args[0]?.includes?.('expected test warning')) {\n    originalConsoleWarn(...args);\n  }\n});\n\n// Mock Buffer for base64 operations\nif (typeof Buffer === 'undefined') {\n  global.Buffer = require('buffer').Buffer;\n}\n\n// Mock TextEncoder/TextDecoder for WebAuthn\nif (typeof TextEncoder === 'undefined') {\n  global.TextEncoder = require('util').TextEncoder;\n}\n\nif (typeof TextDecoder === 'undefined') {\n  global.TextDecoder = require('util').TextDecoder;\n}\n\n// Mock btoa/atob for base64 operations\nif (typeof btoa === 'undefined') {\n  global.btoa = (str) => Buffer.from(str, 'binary').toString('base64');\n}\n\nif (typeof atob === 'undefined') {\n  global.atob = (str) => Buffer.from(str, 'base64').toString('binary');\n}\n\n// Cleanup after each test\nafterEach(() => {\n  jest.clearAllMocks();\n});\n\n// Global test timeout\njest.setTimeout(10000);\n\n// Handle unhandled promise rejections\nprocess.on('unhandledRejection', (reason, promise) => {\n  console.error('Unhandled Rejection at:', promise, 'reason:', reason);\n  // Optionally exit the process\n  // process.exit(1);\n});\n\n// Mock Redis for testing\njest.mock('ioredis', () => {\n  return {\n    default: jest.fn(() => ({\n      get: jest.fn(),\n      set: jest.fn(),\n      del: jest.fn(),\n      incr: jest.fn(),\n      expire: jest.fn(),\n      ttl: jest.fn(),\n      pipeline: jest.fn(() => ({\n        get: jest.fn(),\n        set: jest.fn(),\n        incr: jest.fn(),\n        expire: jest.fn(),\n        exec: jest.fn(() => Promise.resolve([])),\n      })),\n      disconnect: jest.fn(),\n    })),\n  };\n});\n\n// Mock bcrypt for password hashing\njest.mock('bcryptjs', () => ({\n  hash: jest.fn((password, rounds) => Promise.resolve(`hashed_${password}_${rounds}`)),\n  compare: jest.fn((password, hash) => Promise.resolve(hash.includes(password))),\n  genSalt: jest.fn((rounds) => Promise.resolve(`salt_${rounds}`)),\n}));\n\n// Mock speakeasy for TOTP\njest.mock('speakeasy', () => ({\n  generateSecret: jest.fn(() => ({\n    ascii: 'test-secret',\n    base32: 'TESTSECRET123456',\n    hex: 'test-hex',\n  })),\n  totp: jest.fn(() => '123456'),\n  time: jest.fn(() => ({ T: 123456 })),\n}));\n\n// Mock qrcode for QR code generation\njest.mock('qrcode', () => ({\n  toDataURL: jest.fn((data) => Promise.resolve(`data:image/png;base64,${Buffer.from(data).toString('base64')}`)),\n}));\n\n// Mock file system operations\njest.mock('fs', () => ({\n  ...jest.requireActual('fs'),\n  existsSync: jest.fn(() => true),\n  mkdirSync: jest.fn(),\n  writeFileSync: jest.fn(),\n  readFileSync: jest.fn(() => Buffer.from('mock-file-content')),\n  rmSync: jest.fn(),\n  readdirSync: jest.fn(() => ['key1.pem', 'key2.pem']),\n}));\n\nexport default undefined;"],"names":["process","env","NODE_ENV","NEXT_PUBLIC_SUPABASE_URL","NEXT_PUBLIC_SUPABASE_ANON_KEY","SUPABASE_SERVICE_ROLE_KEY","ENCRYPTION_PROVIDER","KEY_STORE_PATH","global","crypto","randomUUID","Math","random","toString","substr","randomBytes","size","Buffer","alloc","getRandomValues","array","i","length","floor","fetch","jest","fn","performance","now","Date","mark","measure","getEntriesByName","getEntriesByType","clearMarks","clearMeasures","navigator","credentials","create","get","originalConsoleError","console","error","originalConsoleWarn","warn","args","includes","require","TextEncoder","TextDecoder","btoa","str","from","atob","afterEach","clearAllMocks","setTimeout","on","reason","promise","mock","default","set","del","incr","expire","ttl","pipeline","exec","Promise","resolve","disconnect","hash","password","rounds","compare","genSalt","generateSecret","ascii","base32","hex","totp","time","T","toDataURL","data","requireActual","existsSync","mkdirSync","writeFileSync","readFileSync","rmSync","readdirSync","undefined"],"mappings":"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"}