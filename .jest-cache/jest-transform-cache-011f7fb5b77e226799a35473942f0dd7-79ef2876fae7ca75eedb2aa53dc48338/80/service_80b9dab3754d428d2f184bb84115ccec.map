{"version":3,"sources":["/workspaces/blipee-os/src/lib/audit/service.ts"],"sourcesContent":["import { AuditEvent, AuditEventType, AuditEventSeverity, AuditLogQuery, AuditLogSummary } from './types';\nimport { createClient } from '@/lib/supabase/client';\nimport crypto from 'crypto';\n\n// Dynamic imports for server-side only\ntype RedisInstance = any;\ntype ElasticsearchClient = any;\n\nexport interface AuditServiceConfig {\n  storage: 'supabase' | 'redis' | 'elasticsearch';\n  redis?: {\n    host: string;\n    port: number;\n    password?: string;\n  };\n  elasticsearch?: {\n    node: string;\n    apiKey?: string;\n  };\n  retention: {\n    days: number;\n    archiveAfterDays?: number;\n  };\n  realtime?: boolean;\n  encryption?: boolean;\n}\n\n/**\n * Enterprise-grade audit logging service\n */\nexport class AuditService {\n  private config: AuditServiceConfig;\n  private redis: RedisInstance | null = null;\n  private elasticsearch: ElasticsearchClient | null = null;\n  private batchQueue: AuditEvent[] = [];\n  private batchTimer: NodeJS.Timeout | null = null;\n  private readonly BATCH_SIZE = 100;\n  private readonly BATCH_INTERVAL = 5000; // 5 seconds\n\n  constructor(config: Partial<AuditServiceConfig> = {}) {\n    this.config = {\n      storage: config.storage || 'supabase',\n      retention: {\n        days: config.retention?.days || 90,\n        archiveAfterDays: config.retention?.archiveAfterDays || 365,\n      },\n      realtime: config.realtime !== false,\n      encryption: config.encryption !== false,\n      ...config,\n    };\n\n    if (typeof window === 'undefined') {\n      this.initializeStorageBackends();\n    }\n  }\n\n  private async initializeStorageBackends() {\n    // Initialize Redis if configured\n    if (this.config.storage === 'redis' && this.config.redis) {\n      try {\n        const ioredis = await import('ioredis');\n        this.redis = new ioredis.default(this.config.redis);\n        console.log('Audit log Redis backend initialized');\n      } catch (error) {\n        console.error('Failed to initialize Redis for audit logs:', error);\n      }\n    }\n\n    // Initialize Elasticsearch if configured\n    if (this.config.storage === 'elasticsearch' && this.config.elasticsearch) {\n      console.warn('Elasticsearch not available in this build, falling back to Supabase');\n      this.config.storage = 'supabase';\n    }\n  }\n\n  /**\n   * Log an audit event\n   */\n  async log(event: Omit<AuditEvent, 'id' | 'timestamp'>): Promise<void> {\n    const auditEvent: AuditEvent = {\n      ...event,\n      id: crypto.randomUUID(),\n      timestamp: new Date(),\n    };\n\n    // Add to batch queue\n    this.batchQueue.push(auditEvent);\n\n    // Process immediately if critical\n    if (event.severity === AuditEventSeverity.CRITICAL) {\n      await this.processBatch();\n    } else {\n      // Start batch timer if not already running\n      if (!this.batchTimer) {\n        this.batchTimer = setTimeout(() => this.processBatch(), this.BATCH_INTERVAL);\n      }\n\n      // Process if batch is full\n      if (this.batchQueue.length >= this.BATCH_SIZE) {\n        await this.processBatch();\n      }\n    }\n\n    // Emit realtime event if enabled\n    if (this.config.realtime) {\n      this.emitRealtimeEvent(auditEvent);\n    }\n  }\n\n  /**\n   * Process batch of audit events\n   */\n  private async processBatch(): Promise<void> {\n    if (this.batchQueue.length === 0) return;\n\n    const events = [...this.batchQueue];\n    this.batchQueue = [];\n\n    if (this.batchTimer) {\n      clearTimeout(this.batchTimer);\n      this.batchTimer = null;\n    }\n\n    try {\n      switch (this.config.storage) {\n        case 'supabase':\n          await this.storeInSupabase(events);\n          break;\n        case 'redis':\n          await this.storeInRedis(events);\n          break;\n        case 'elasticsearch':\n          await this.storeInElasticsearch(events);\n          break;\n      }\n    } catch (error) {\n      console.error('Failed to store audit events:', error);\n      // Re-queue events for retry\n      this.batchQueue.unshift(...events);\n    }\n  }\n\n  /**\n   * Store events in Supabase\n   */\n  private async storeInSupabase(events: AuditEvent[]): Promise<void> {\n    const supabase = createClient();\n    const { error } = await supabase\n      .from('audit_logs')\n      .insert(events.map(event => ({\n        id: event.id,\n        timestamp: event.timestamp.toISOString(),\n        type: event.type,\n        severity: event.severity,\n        actor_type: event.actor.type,\n        actor_id: event.actor.id,\n        actor_email: event.actor.email,\n        actor_ip: event.actor.ip,\n        actor_user_agent: event.actor.userAgent,\n        target_type: event.target?.type,\n        target_id: event.target?.id,\n        target_name: event.target?.name,\n        organization_id: event.context.organizationId,\n        building_id: event.context.buildingId,\n        session_id: event.context.sessionId,\n        request_id: event.context.requestId,\n        api_key_id: event.context.apiKeyId,\n        metadata: event.metadata,\n        changes: event.changes,\n        result: event.result,\n        error_code: event.errorDetails?.code,\n        error_message: event.errorDetails?.message,\n        error_stack_trace: event.errorDetails?.stackTrace,\n      })));\n\n    if (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Store events in Redis\n   */\n  private async storeInRedis(events: AuditEvent[]): Promise<void> {\n    if (!this.redis) {\n      throw new Error('Redis not initialized');\n    }\n\n    const pipeline = this.redis.pipeline();\n\n    for (const event of events) {\n      const key = `audit:${event.timestamp.getTime()}:${event.id}`;\n      const ttl = this.config.retention.days * 24 * 60 * 60; // Convert days to seconds\n      \n      pipeline.setex(key, ttl, JSON.stringify(event));\n      \n      // Add to sorted set for efficient querying\n      pipeline.zadd('audit:timeline', event.timestamp.getTime(), key);\n      \n      // Add to type index\n      pipeline.zadd(`audit:type:${event.type}`, event.timestamp.getTime(), key);\n      \n      // Add to severity index\n      pipeline.zadd(`audit:severity:${event.severity}`, event.timestamp.getTime(), key);\n      \n      // Add to actor index if present\n      if (event.actor.id) {\n        pipeline.zadd(`audit:actor:${event.actor.id}`, event.timestamp.getTime(), key);\n      }\n    }\n\n    await pipeline.exec();\n  }\n\n  /**\n   * Store events in Elasticsearch\n   */\n  private async storeInElasticsearch(events: AuditEvent[]): Promise<void> {\n    if (!this.elasticsearch) {\n      throw new Error('Elasticsearch not initialized');\n    }\n\n    const body = events.flatMap(event => [\n      { index: { _index: 'audit-logs', _id: event.id } },\n      event,\n    ]);\n\n    await this.elasticsearch.bulk({ body });\n  }\n\n  /**\n   * Query audit logs\n   */\n  async query(query: AuditLogQuery): Promise<AuditEvent[]> {\n    switch (this.config.storage) {\n      case 'supabase':\n        return this.querySupabase(query);\n      case 'redis':\n        return this.queryRedis(query);\n      case 'elasticsearch':\n        return this.queryElasticsearch(query);\n      default:\n        return [];\n    }\n  }\n\n  /**\n   * Query Supabase\n   */\n  private async querySupabase(query: AuditLogQuery): Promise<AuditEvent[]> {\n    const supabase = createClient();\n    let supabaseQuery = supabase\n      .from('audit_logs')\n      .select('*');\n\n    // Apply filters\n    if (query.startDate) {\n      supabaseQuery = supabaseQuery.gte('timestamp', query.startDate.toISOString());\n    }\n    if (query.endDate) {\n      supabaseQuery = supabaseQuery.lte('timestamp', query.endDate.toISOString());\n    }\n    if (query.types?.length) {\n      supabaseQuery = supabaseQuery.in('type', query.types);\n    }\n    if (query.severities?.length) {\n      supabaseQuery = supabaseQuery.in('severity', query.severities);\n    }\n    if (query.actorId) {\n      supabaseQuery = supabaseQuery.eq('actor_id', query.actorId);\n    }\n    if (query.targetId) {\n      supabaseQuery = supabaseQuery.eq('target_id', query.targetId);\n    }\n    if (query.organizationId) {\n      supabaseQuery = supabaseQuery.eq('organization_id', query.organizationId);\n    }\n    if (query.result) {\n      supabaseQuery = supabaseQuery.eq('result', query.result);\n    }\n    if (query.search) {\n      supabaseQuery = supabaseQuery.or(`\n        actor_email.ilike.%${query.search}%,\n        target_name.ilike.%${query.search}%,\n        error_message.ilike.%${query.search}%\n      `);\n    }\n\n    // Apply sorting\n    const sortBy = query.sortBy || 'timestamp';\n    const sortOrder = query.sortOrder || 'desc';\n    supabaseQuery = supabaseQuery.order(sortBy, { ascending: sortOrder === 'asc' });\n\n    // Apply pagination\n    if (query.limit) {\n      supabaseQuery = supabaseQuery.limit(query.limit);\n    }\n    if (query.offset) {\n      supabaseQuery = supabaseQuery.range(query.offset, query.offset + (query.limit || 50) - 1);\n    }\n\n    const { data, error } = await supabaseQuery;\n\n    if (error) {\n      throw error;\n    }\n\n    return (data || []).map(row => this.mapRowToEvent(row));\n  }\n\n  /**\n   * Query Redis\n   */\n  private async queryRedis(query: AuditLogQuery): Promise<AuditEvent[]> {\n    if (!this.redis) {\n      throw new Error('Redis not initialized');\n    }\n\n    // Determine which index to use\n    let indexKey = 'audit:timeline';\n    if (query.types?.length === 1) {\n      indexKey = `audit:type:${query.types[0]}`;\n    } else if (query.severities?.length === 1) {\n      indexKey = `audit:severity:${query.severities[0]}`;\n    } else if (query.actorId) {\n      indexKey = `audit:actor:${query.actorId}`;\n    }\n\n    // Get keys from sorted set\n    const startScore = query.startDate ? query.startDate.getTime() : '-inf';\n    const endScore = query.endDate ? query.endDate.getTime() : '+inf';\n    const keys = await this.redis.zrevrangebyscore(\n      indexKey,\n      endScore,\n      startScore,\n      'LIMIT',\n      query.offset || 0,\n      query.limit || 50\n    );\n\n    // Get events\n    const events: AuditEvent[] = [];\n    for (const key of keys) {\n      const data = await this.redis.get(key);\n      if (data) {\n        const event = JSON.parse(data);\n        \n        // Apply additional filters\n        if (this.matchesQuery(event, query)) {\n          events.push(event);\n        }\n      }\n    }\n\n    return events;\n  }\n\n  /**\n   * Query Elasticsearch\n   */\n  private async queryElasticsearch(query: AuditLogQuery): Promise<AuditEvent[]> {\n    if (!this.elasticsearch) {\n      throw new Error('Elasticsearch not initialized');\n    }\n\n    const must: any[] = [];\n\n    // Build query\n    if (query.startDate || query.endDate) {\n      must.push({\n        range: {\n          timestamp: {\n            gte: query.startDate?.toISOString(),\n            lte: query.endDate?.toISOString(),\n          },\n        },\n      });\n    }\n\n    if (query.types?.length) {\n      must.push({ terms: { type: query.types } });\n    }\n    if (query.severities?.length) {\n      must.push({ terms: { severity: query.severities } });\n    }\n    if (query.actorId) {\n      must.push({ term: { 'actor.id': query.actorId } });\n    }\n    if (query.search) {\n      must.push({\n        multi_match: {\n          query: query.search,\n          fields: ['actor.email', 'target.name', 'errorDetails.message'],\n        },\n      });\n    }\n\n    const response = await this.elasticsearch.search({\n      index: 'audit-logs',\n      body: {\n        query: must.length > 0 ? { bool: { must } } : { match_all: {} },\n        sort: [{ [query.sortBy || 'timestamp']: query.sortOrder || 'desc' }],\n        from: query.offset || 0,\n        size: query.limit || 50,\n      },\n    });\n\n    return response.body.hits.hits.map((hit: any) => hit._source);\n  }\n\n  /**\n   * Get audit log summary\n   */\n  async getSummary(\n    organizationId?: string,\n    timeRange: { start: Date; end: Date } = {\n      start: new Date(Date.now() - 24 * 60 * 60 * 1000),\n      end: new Date(),\n    }\n  ): Promise<AuditLogSummary> {\n    const events = await this.query({\n      organizationId,\n      startDate: timeRange.start,\n      endDate: timeRange.end,\n      limit: 1000,\n    });\n\n    const summary: AuditLogSummary = {\n      totalEvents: events.length,\n      eventsByType: {},\n      eventsBySeverity: {\n        [AuditEventSeverity.INFO]: 0,\n        [AuditEventSeverity.WARNING]: 0,\n        [AuditEventSeverity.ERROR]: 0,\n        [AuditEventSeverity.CRITICAL]: 0,\n      },\n      eventsByResult: {\n        success: 0,\n        failure: 0,\n      },\n      topActors: [],\n      recentSecurityEvents: [],\n    };\n\n    const actorCounts = new Map<string, { email?: string; count: number }>();\n\n    for (const event of events) {\n      // Count by type\n      summary.eventsByType[event.type] = (summary.eventsByType[event.type] || 0) + 1;\n\n      // Count by severity\n      summary.eventsBySeverity[event.severity]++;\n\n      // Count by result\n      summary.eventsByResult[event.result]++;\n\n      // Count by actor\n      if (event.actor.id) {\n        const current = actorCounts.get(event.actor.id) || { email: event.actor.email, count: 0 };\n        current.count++;\n        actorCounts.set(event.actor.id, current);\n      }\n\n      // Collect security events\n      if (event.type.startsWith('security.') && event.severity !== AuditEventSeverity.INFO) {\n        summary.recentSecurityEvents.push(event);\n      }\n    }\n\n    // Get top actors\n    summary.topActors = Array.from(actorCounts.entries())\n      .map(([actorId, data]) => ({\n        actorId,\n        actorEmail: data.email,\n        eventCount: data.count,\n      }))\n      .sort((a, b) => b.eventCount - a.eventCount)\n      .slice(0, 10);\n\n    // Limit security events\n    summary.recentSecurityEvents = summary.recentSecurityEvents\n      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())\n      .slice(0, 10);\n\n    return summary;\n  }\n\n  /**\n   * Export audit logs\n   */\n  async export(query: AuditLogQuery, format: 'json' | 'csv' = 'json'): Promise<string> {\n    const events = await this.query({ ...query, limit: 10000 });\n\n    if (format === 'json') {\n      return JSON.stringify(events, null, 2);\n    }\n\n    // CSV export\n    const headers = [\n      'ID', 'Timestamp', 'Type', 'Severity', 'Actor Type', 'Actor ID', 'Actor Email',\n      'Actor IP', 'Target Type', 'Target ID', 'Target Name', 'Organization ID',\n      'Result', 'Error Code', 'Error Message'\n    ];\n\n    const rows = events.map(event => [\n      event.id,\n      event.timestamp.toISOString(),\n      event.type,\n      event.severity,\n      event.actor.type,\n      event.actor.id || '',\n      event.actor.email || '',\n      event.actor.ip || '',\n      event.target?.type || '',\n      event.target?.id || '',\n      event.target?.name || '',\n      event.context.organizationId || '',\n      event.result,\n      event.errorDetails?.code || '',\n      event.errorDetails?.message || '',\n    ]);\n\n    return [\n      headers.join(','),\n      ...rows.map(row => row.map(cell => `\"${String(cell).replace(/\"/g, '\"\"')}\"`).join(',')),\n    ].join('\\n');\n  }\n\n  /**\n   * Clean up old audit logs\n   */\n  async cleanup(): Promise<number> {\n    const cutoffDate = new Date(Date.now() - this.config.retention.days * 24 * 60 * 60 * 1000);\n    \n    switch (this.config.storage) {\n      case 'supabase':\n        const supabase = createClient();\n        const { count } = await supabase\n          .from('audit_logs')\n          .delete()\n          .lt('timestamp', cutoffDate.toISOString());\n        return count || 0;\n        \n      case 'redis':\n        if (!this.redis) return 0;\n        // Redis handles TTL automatically\n        return 0;\n        \n      case 'elasticsearch':\n        if (!this.elasticsearch) return 0;\n        const response = await this.elasticsearch.deleteByQuery({\n          index: 'audit-logs',\n          body: {\n            query: {\n              range: {\n                timestamp: {\n                  lt: cutoffDate.toISOString(),\n                },\n              },\n            },\n          },\n        });\n        return response.body.deleted || 0;\n        \n      default:\n        return 0;\n    }\n  }\n\n  // Helper methods\n\n  private mapRowToEvent(row: any): AuditEvent {\n    return {\n      id: row.id,\n      timestamp: new Date(row.timestamp),\n      type: row.type,\n      severity: row.severity,\n      actor: {\n        type: row.actor_type,\n        id: row.actor_id,\n        email: row.actor_email,\n        ip: row.actor_ip,\n        userAgent: row.actor_user_agent,\n      },\n      target: row.target_id ? {\n        type: row.target_type,\n        id: row.target_id,\n        name: row.target_name,\n      } : undefined,\n      context: {\n        organizationId: row.organization_id,\n        buildingId: row.building_id,\n        sessionId: row.session_id,\n        requestId: row.request_id,\n        apiKeyId: row.api_key_id,\n      },\n      metadata: row.metadata || {},\n      changes: row.changes,\n      result: row.result,\n      errorDetails: row.error_code ? {\n        code: row.error_code,\n        message: row.error_message,\n        stackTrace: row.error_stack_trace,\n      } : undefined,\n    };\n  }\n\n  private matchesQuery(event: AuditEvent, query: AuditLogQuery): boolean {\n    if (query.types?.length && !query.types.includes(event.type)) return false;\n    if (query.severities?.length && !query.severities.includes(event.severity)) return false;\n    if (query.actorType && event.actor.type !== query.actorType) return false;\n    if (query.targetType && event.target?.type !== query.targetType) return false;\n    if (query.organizationId && event.context.organizationId !== query.organizationId) return false;\n    if (query.result && event.result !== query.result) return false;\n    \n    return true;\n  }\n\n  private emitRealtimeEvent(event: AuditEvent): void {\n    // Emit to Supabase realtime if available\n    // This could also emit to websockets, SSE, etc.\n    if (typeof window === 'undefined') {\n      // Server-side: could emit to Redis pub/sub, etc.\n    }\n  }\n\n  private async ensureElasticsearchIndex(): Promise<void> {\n    if (!this.elasticsearch) return;\n\n    const indexExists = await this.elasticsearch.indices.exists({ index: 'audit-logs' });\n    \n    if (!indexExists.body) {\n      await this.elasticsearch.indices.create({\n        index: 'audit-logs',\n        body: {\n          mappings: {\n            properties: {\n              timestamp: { type: 'date' },\n              type: { type: 'keyword' },\n              severity: { type: 'keyword' },\n              'actor.type': { type: 'keyword' },\n              'actor.id': { type: 'keyword' },\n              'actor.email': { type: 'keyword' },\n              'actor.ip': { type: 'ip' },\n              'target.type': { type: 'keyword' },\n              'target.id': { type: 'keyword' },\n              'target.name': { type: 'text' },\n              result: { type: 'keyword' },\n              'context.organizationId': { type: 'keyword' },\n              'context.buildingId': { type: 'keyword' },\n            },\n          },\n        },\n      });\n    }\n  }\n}\n\n// Singleton instance\nlet auditServiceInstance: AuditService | null = null;\n\nexport function getAuditService(config?: Partial<AuditServiceConfig>): AuditService {\n  if (!auditServiceInstance) {\n    auditServiceInstance = new AuditService(config);\n  }\n  return auditServiceInstance;\n}\n\n// Default export for convenience\nexport const auditService = getAuditService();"],"names":["AuditService","auditService","getAuditService","constructor","config","redis","elasticsearch","batchQueue","batchTimer","BATCH_SIZE","BATCH_INTERVAL","storage","retention","days","archiveAfterDays","realtime","encryption","window","initializeStorageBackends","ioredis","default","console","log","error","warn","event","auditEvent","id","crypto","randomUUID","timestamp","Date","push","severity","AuditEventSeverity","CRITICAL","processBatch","setTimeout","length","emitRealtimeEvent","events","clearTimeout","storeInSupabase","storeInRedis","storeInElasticsearch","unshift","supabase","createClient","from","insert","map","toISOString","type","actor_type","actor","actor_id","actor_email","email","actor_ip","ip","actor_user_agent","userAgent","target_type","target","target_id","target_name","name","organization_id","context","organizationId","building_id","buildingId","session_id","sessionId","request_id","requestId","api_key_id","apiKeyId","metadata","changes","result","error_code","errorDetails","code","error_message","message","error_stack_trace","stackTrace","Error","pipeline","key","getTime","ttl","setex","JSON","stringify","zadd","exec","body","flatMap","index","_index","_id","bulk","query","querySupabase","queryRedis","queryElasticsearch","supabaseQuery","select","startDate","gte","endDate","lte","types","in","severities","actorId","eq","targetId","search","or","sortBy","sortOrder","order","ascending","limit","offset","range","data","row","mapRowToEvent","indexKey","startScore","endScore","keys","zrevrangebyscore","get","parse","matchesQuery","must","terms","term","multi_match","fields","response","bool","match_all","sort","size","hits","hit","_source","getSummary","timeRange","start","now","end","summary","totalEvents","eventsByType","eventsBySeverity","INFO","WARNING","ERROR","eventsByResult","success","failure","topActors","recentSecurityEvents","actorCounts","Map","current","count","set","startsWith","Array","entries","actorEmail","eventCount","a","b","slice","export","format","headers","rows","join","cell","String","replace","cleanup","cutoffDate","delete","lt","deleteByQuery","deleted","undefined","includes","actorType","targetType","ensureElasticsearchIndex","indexExists","indices","exists","create","mappings","properties","auditServiceInstance"],"mappings":"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"}