{"version":3,"sources":["/workspaces/blipee-os/src/lib/monitoring/__tests__/monitoring.test.ts"],"sourcesContent":["import { jest } from '@jest/globals';\nimport {\n  MetricType,\n  AlertSeverity,\n  AlertChannel,\n} from '../types';\nimport { MonitoringService } from '../service';\nimport { MetricsCollector } from '../collector';\nimport { HealthCheckService } from '../health';\n\n// Mock dependencies\njest.mock('@/lib/supabase/admin', () => ({\n  supabaseAdmin: {\n    from: jest.fn(() => ({\n      insert: jest.fn(() => ({ error: null })),\n      upsert: jest.fn(() => ({ error: null })),\n      select: jest.fn(() => ({ \n        data: [], \n        error: null,\n        single: jest.fn(() => ({ data: null, error: { code: 'PGRST116' } })),\n      })),\n      delete: jest.fn(() => ({ \n        eq: jest.fn(() => ({ error: null })),\n      })),\n      update: jest.fn(() => ({ \n        eq: jest.fn(() => ({ error: null })),\n      })),\n    })),\n  },\n}));\n\njest.mock('@/lib/audit/service', () => ({\n  auditService: {\n    log: jest.fn(() => Promise.resolve()),\n  },\n}));\n\njest.mock('@/lib/auth/session-store', () => ({\n  sessionStore: {\n    set: jest.fn(() => Promise.resolve()),\n    get: jest.fn(() => Promise.resolve({ test: true, timestamp: Date.now() })),\n    delete: jest.fn(() => Promise.resolve()),\n  },\n}));\n\ndescribe('MonitoringService', () => {\n  let monitoringService: MonitoringService;\n\n  beforeEach(() => {\n    monitoringService = new MonitoringService();\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('recordMetric', () => {\n    it('should record a metric successfully', async () => {\n      const metric = {\n        name: 'test_metric',\n        type: MetricType.COUNTER,\n        value: 1,\n        labels: { test: 'true' },\n      };\n\n      await monitoringService.recordMetric(metric);\n\n      const metrics = monitoringService.getMetrics('test_metric', { test: 'true' });\n      expect(metrics).toHaveLength(1);\n      expect(metrics[0].value).toBe(1);\n    });\n\n    it('should record multiple metrics with different labels', async () => {\n      await monitoringService.recordMetric({\n        name: 'api_calls',\n        type: MetricType.COUNTER,\n        value: 1,\n        labels: { endpoint: '/api/users' },\n      });\n\n      await monitoringService.recordMetric({\n        name: 'api_calls',\n        type: MetricType.COUNTER,\n        value: 1,\n        labels: { endpoint: '/api/posts' },\n      });\n\n      const userMetrics = monitoringService.getMetrics('api_calls', { endpoint: '/api/users' });\n      const postMetrics = monitoringService.getMetrics('api_calls', { endpoint: '/api/posts' });\n\n      expect(userMetrics).toHaveLength(1);\n      expect(postMetrics).toHaveLength(1);\n    });\n  });\n\n  describe('alert rules', () => {\n    it('should create and evaluate alert rules', async () => {\n      const rule = {\n        id: 'test-rule',\n        name: 'Test Alert',\n        metric: 'test_metric',\n        condition: 'gt' as const,\n        threshold: 5,\n        severity: AlertSeverity.WARNING,\n        channels: [AlertChannel.EMAIL],\n        enabled: true,\n      };\n\n      await monitoringService.setAlertRule(rule);\n\n      // Record metric below threshold\n      await monitoringService.recordMetric({\n        name: 'test_metric',\n        type: MetricType.GAUGE,\n        value: 3,\n      });\n\n      // Record metric above threshold\n      await monitoringService.recordMetric({\n        name: 'test_metric',\n        type: MetricType.GAUGE,\n        value: 10,\n      });\n    });\n  });\n\n  describe('getDashboard', () => {\n    it('should return dashboard data', async () => {\n      // Record some test metrics\n      await monitoringService.recordMetric({\n        name: 'http_requests_total',\n        type: MetricType.COUNTER,\n        value: 100,\n        labels: { status: 'success' },\n      });\n\n      await monitoringService.recordMetric({\n        name: 'http_requests_total',\n        type: MetricType.COUNTER,\n        value: 10,\n        labels: { status: 'failure' },\n      });\n\n      const dashboard = await monitoringService.getDashboard();\n\n      expect(dashboard).toHaveProperty('metrics');\n      expect(dashboard).toHaveProperty('alerts');\n      expect(dashboard).toHaveProperty('healthChecks');\n      expect(dashboard).toHaveProperty('recentEvents');\n    });\n  });\n});\n\ndescribe('MetricsCollector', () => {\n  it('should record HTTP request metrics', async () => {\n    await MetricsCollector.recordHttpRequest(\n      'GET',\n      '/api/test',\n      200,\n      150,\n      'user-123'\n    );\n\n    // Verify metrics were recorded (mocked)\n    expect(true).toBe(true);\n  });\n\n  it('should record authentication events', async () => {\n    await MetricsCollector.recordAuthEvent(\n      'login',\n      true,\n      'password',\n      'user-123'\n    );\n\n    await MetricsCollector.recordAuthEvent(\n      'login',\n      false,\n      'password',\n      'user-456'\n    );\n\n    // Verify metrics were recorded (mocked)\n    expect(true).toBe(true);\n  });\n\n  it('should record rate limit events', async () => {\n    await MetricsCollector.recordRateLimit(\n      'user-123',\n      '/api/test',\n      true\n    );\n\n    // Verify metrics were recorded (mocked)\n    expect(true).toBe(true);\n  });\n});\n\ndescribe('HealthCheckService', () => {\n  let healthService: HealthCheckService;\n\n  beforeEach(() => {\n    healthService = new HealthCheckService();\n  });\n\n  it('should run health checks', async () => {\n    const results = await healthService.runAll();\n\n    expect(results).toBeInstanceOf(Array);\n    expect(results.length).toBeGreaterThan(0);\n\n    // Check that we have expected services\n    const services = results.map(r => r.service);\n    expect(services).toContain('memory');\n  });\n\n  it('should register custom health check', async () => {\n    healthService.register('custom', async () => ({\n      service: 'custom',\n      status: 'healthy',\n      lastCheck: new Date(),\n    }));\n\n    const result = await healthService.run('custom');\n    expect(result).toBeTruthy();\n    expect(result?.status).toBe('healthy');\n  });\n\n  it('should get system health summary', async () => {\n    const health = await healthService.getSystemHealth();\n\n    expect(health).toHaveProperty('status');\n    expect(health).toHaveProperty('checks');\n    expect(health).toHaveProperty('summary');\n    expect(health.summary).toHaveProperty('total');\n    expect(health.summary).toHaveProperty('healthy');\n    expect(health.summary).toHaveProperty('degraded');\n    expect(health.summary).toHaveProperty('unhealthy');\n  });\n});"],"names":["jest","mock","supabaseAdmin","from","fn","insert","error","upsert","select","data","single","code","delete","eq","update","auditService","log","Promise","resolve","sessionStore","set","get","test","timestamp","Date","now","describe","monitoringService","beforeEach","MonitoringService","afterEach","clearAllMocks","it","metric","name","type","MetricType","COUNTER","value","labels","recordMetric","metrics","getMetrics","expect","toHaveLength","toBe","endpoint","userMetrics","postMetrics","rule","id","condition","threshold","severity","AlertSeverity","WARNING","channels","AlertChannel","EMAIL","enabled","setAlertRule","GAUGE","status","dashboard","getDashboard","toHaveProperty","MetricsCollector","recordHttpRequest","recordAuthEvent","recordRateLimit","healthService","HealthCheckService","results","runAll","toBeInstanceOf","Array","length","toBeGreaterThan","services","map","r","service","toContain","register","lastCheck","result","run","toBeTruthy","health","getSystemHealth","summary"],"mappings":"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"}