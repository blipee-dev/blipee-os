c18dc848499d740b24293e31aaf84409
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    HealthCheckService: function() {
        return HealthCheckService;
    },
    getSystemHealth: function() {
        return getSystemHealth;
    },
    healthCheckService: function() {
        return healthCheckService;
    },
    isServiceHealthy: function() {
        return isServiceHealthy;
    },
    registerHealthCheck: function() {
        return registerHealthCheck;
    },
    runAllHealthChecks: function() {
        return runAllHealthChecks;
    },
    runHealthCheck: function() {
        return runHealthCheck;
    },
    unregisterHealthCheck: function() {
        return unregisterHealthCheck;
    },
    waitForHealth: function() {
        return waitForHealth;
    }
});
const _service = require("./service");
const _admin = require("../supabase/admin");
const _sessionstore = require("../auth/session-store");
class HealthCheckService {
    constructor(){
        this.checks = new Map();
        this.interval = null;
        this.registerDefaultChecks();
    }
    /**
   * Register default health checks
   */ registerDefaultChecks() {
        // Database health check
        this.register("database", async ()=>{
            const startTime = Date.now();
            try {
                const { data, error } = await _admin.supabaseAdmin.from("health_check").select("status").single();
                const responseTime = Date.now() - startTime;
                if (error && error.code !== "PGRST116") {
                    return {
                        service: "database",
                        status: "unhealthy",
                        responseTime,
                        lastCheck: new Date(),
                        details: {
                            error: error.message
                        }
                    };
                }
                return {
                    service: "database",
                    status: responseTime < 1000 ? "healthy" : "degraded",
                    responseTime,
                    lastCheck: new Date()
                };
            } catch (error) {
                return {
                    service: "database",
                    status: "unhealthy",
                    responseTime: Date.now() - startTime,
                    lastCheck: new Date(),
                    details: {
                        error: error instanceof Error ? error.message : "Unknown error"
                    }
                };
            }
        });
        // Redis/Session store health check
        this.register("session-store", async ()=>{
            const startTime = Date.now();
            try {
                // Test set and get
                const testKey = "health-check-test";
                const testValue = {
                    test: true,
                    timestamp: Date.now()
                };
                await _sessionstore.sessionStore.set(testKey, testValue, 10); // 10 second TTL
                const retrieved = await _sessionstore.sessionStore.get(testKey);
                await _sessionstore.sessionStore.delete(testKey);
                const responseTime = Date.now() - startTime;
                if (!retrieved || retrieved.timestamp !== testValue.timestamp) {
                    return {
                        service: "session-store",
                        status: "unhealthy",
                        responseTime,
                        lastCheck: new Date(),
                        details: {
                            error: "Data integrity check failed"
                        }
                    };
                }
                return {
                    service: "session-store",
                    status: responseTime < 100 ? "healthy" : "degraded",
                    responseTime,
                    lastCheck: new Date()
                };
            } catch (error) {
                return {
                    service: "session-store",
                    status: "unhealthy",
                    responseTime: Date.now() - startTime,
                    lastCheck: new Date(),
                    details: {
                        error: error instanceof Error ? error.message : "Unknown error"
                    }
                };
            }
        });
        // API health check
        this.register("api", async ()=>{
            const startTime = Date.now();
            try {
                const response = await fetch(`${process.env.NEXT_PUBLIC_APP_URL || "http://localhost:3000"}/api/health`, {
                    method: "GET",
                    signal: AbortSignal.timeout(5000)
                });
                const responseTime = Date.now() - startTime;
                if (!response.ok) {
                    return {
                        service: "api",
                        status: "unhealthy",
                        responseTime,
                        lastCheck: new Date(),
                        details: {
                            statusCode: response.status
                        }
                    };
                }
                return {
                    service: "api",
                    status: responseTime < 500 ? "healthy" : "degraded",
                    responseTime,
                    lastCheck: new Date()
                };
            } catch (error) {
                return {
                    service: "api",
                    status: "unhealthy",
                    responseTime: Date.now() - startTime,
                    lastCheck: new Date(),
                    details: {
                        error: error instanceof Error ? error.message : "Unknown error"
                    }
                };
            }
        });
        // Memory health check
        this.register("memory", async ()=>{
            const memoryUsage = process.memoryUsage();
            const heapUsedPercent = memoryUsage.heapUsed / memoryUsage.heapTotal * 100;
            let status;
            if (heapUsedPercent < 70) {
                status = "healthy";
            } else if (heapUsedPercent < 85) {
                status = "degraded";
            } else {
                status = "unhealthy";
            }
            return {
                service: "memory",
                status,
                lastCheck: new Date(),
                details: {
                    heapUsed: Math.round(memoryUsage.heapUsed / 1024 / 1024),
                    heapTotal: Math.round(memoryUsage.heapTotal / 1024 / 1024),
                    heapUsedPercent: Math.round(heapUsedPercent),
                    rss: Math.round(memoryUsage.rss / 1024 / 1024)
                }
            };
        });
    }
    /**
   * Register a health check
   */ register(name, check) {
        this.checks.set(name, check);
    }
    /**
   * Unregister a health check
   */ unregister(name) {
        this.checks.delete(name);
    }
    /**
   * Run all health checks
   */ async runAll() {
        const results = [];
        for (const [name, check] of this.checks){
            try {
                const result = await check();
                results.push(result);
                // Update monitoring service
                await _service.monitoringService.updateHealthCheck(result);
            } catch (error) {
                const errorResult = {
                    service: name,
                    status: "unhealthy",
                    lastCheck: new Date(),
                    details: {
                        error: error instanceof Error ? error.message : "Health check failed"
                    }
                };
                results.push(errorResult);
                await _service.monitoringService.updateHealthCheck(errorResult);
            }
        }
        return results;
    }
    /**
   * Run a specific health check
   */ async run(name) {
        const check = this.checks.get(name);
        if (!check) return null;
        try {
            const result = await check();
            await _service.monitoringService.updateHealthCheck(result);
            return result;
        } catch (error) {
            const errorResult = {
                service: name,
                status: "unhealthy",
                lastCheck: new Date(),
                details: {
                    error: error instanceof Error ? error.message : "Health check failed"
                }
            };
            await _service.monitoringService.updateHealthCheck(errorResult);
            return errorResult;
        }
    }
    /**
   * Get overall system health
   */ async getSystemHealth() {
        const checks = await this.runAll();
        const summary = {
            total: checks.length,
            healthy: checks.filter((c)=>c.status === "healthy").length,
            degraded: checks.filter((c)=>c.status === "degraded").length,
            unhealthy: checks.filter((c)=>c.status === "unhealthy").length
        };
        let status;
        if (summary.unhealthy > 0) {
            status = "unhealthy";
        } else if (summary.degraded > 0) {
            status = "degraded";
        } else {
            status = "healthy";
        }
        return {
            status,
            checks,
            summary
        };
    }
    /**
   * Start periodic health checks
   */ startPeriodicChecks(intervalMs = 60000) {
        if (this.interval) {
            clearInterval(this.interval);
        }
        // Run immediately
        this.runAll().catch(console.error);
        // Then run periodically
        this.interval = setInterval(()=>{
            this.runAll().catch(console.error);
        }, intervalMs);
    }
    /**
   * Stop periodic health checks
   */ stopPeriodicChecks() {
        if (this.interval) {
            clearInterval(this.interval);
            this.interval = null;
        }
    }
    /**
   * Check if a service is healthy
   */ async isHealthy(service) {
        const result = await this.run(service);
        return result?.status === "healthy";
    }
    /**
   * Wait for all services to be healthy
   */ async waitForHealth(timeoutMs = 30000, checkIntervalMs = 1000) {
        const startTime = Date.now();
        while(Date.now() - startTime < timeoutMs){
            const health = await this.getSystemHealth();
            if (health.status === "healthy") {
                return true;
            }
            await new Promise((resolve)=>setTimeout(resolve, checkIntervalMs));
        }
        return false;
    }
}
const healthCheckService = new HealthCheckService();
const { register: registerHealthCheck, unregister: unregisterHealthCheck, runAll: runAllHealthChecks, run: runHealthCheck, getSystemHealth, isHealthy: isServiceHealthy, waitForHealth } = healthCheckService;

//# sourceMappingURL=data:application/json;base64,