{"version":3,"sources":["/workspaces/blipee-os/src/lib/supabase/admin.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\n\n// Only throw errors in production or when actually using the client\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\nconst serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n\n// Create a Supabase client with the service role key for admin operations\nexport const supabaseAdmin = (() => {\n  if (!supabaseUrl || !serviceRoleKey) {\n    // Return a proxy that throws an error when any method is accessed\n    return new Proxy({} as any, {\n      get() {\n        throw new Error('Supabase admin client not configured. Missing NEXT_PUBLIC_SUPABASE_URL or SUPABASE_SERVICE_ROLE_KEY');\n      }\n    });\n  }\n\n  return createClient(\n    supabaseUrl,\n    serviceRoleKey,\n    {\n      auth: {\n        autoRefreshToken: false,\n        persistSession: false\n      }\n    }\n  );\n})();"],"names":["supabaseAdmin","supabaseUrl","process","env","NEXT_PUBLIC_SUPABASE_URL","serviceRoleKey","SUPABASE_SERVICE_ROLE_KEY","Proxy","get","Error","createClient","auth","autoRefreshToken","persistSession"],"mappings":";;;;+BAOaA;;;eAAAA;;;4BAPgB;AAE7B,oEAAoE;AACpE,MAAMC,cAAcC,QAAQC,GAAG,CAACC,wBAAwB;AACxD,MAAMC,iBAAiBH,QAAQC,GAAG,CAACG,yBAAyB;AAGrD,MAAMN,gBAAgB,AAAC,CAAA;IAC5B,IAAI,CAACC,eAAe,CAACI,gBAAgB;QACnC,kEAAkE;QAClE,OAAO,IAAIE,MAAM,CAAC,GAAU;YAC1BC;gBACE,MAAM,IAAIC,MAAM;YAClB;QACF;IACF;IAEA,OAAOC,IAAAA,wBAAY,EACjBT,aACAI,gBACA;QACEM,MAAM;YACJC,kBAAkB;YAClBC,gBAAgB;QAClB;IACF;AAEJ,CAAA"}