{"version":3,"sources":["/workspaces/blipee-os/src/lib/monitoring/service.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport {\n  Metric,\n  MetricType,\n  Alert,\n  AlertRule,\n  AlertSeverity,\n  AlertChannel,\n  SecurityEvent,\n  HealthCheck,\n  MonitoringDashboard,\n  NotificationConfig,\n} from './types';\nimport { auditService } from '@/lib/audit/service';\nimport { AuditEventType, AuditEventSeverity } from '@/lib/audit/types';\nimport { supabaseAdmin } from '@/lib/supabase/admin';\nimport { rateLimiter } from '@/lib/security/rate-limiter';\n\nexport class MonitoringService extends EventEmitter {\n  private metrics: Map<string, Metric[]> = new Map();\n  private alerts: Map<string, Alert> = new Map();\n  private alertRules: Map<string, AlertRule> = new Map();\n  private healthChecks: Map<string, HealthCheck> = new Map();\n  private securityEvents: SecurityEvent[] = [];\n  private notificationConfig: NotificationConfig = {};\n  private metricsRetentionMs = 24 * 60 * 60 * 1000; // 24 hours\n  private evaluationInterval: NodeJS.Timeout | null = null;\n\n  constructor() {\n    super();\n    this.initialize();\n  }\n\n  private async initialize() {\n    // Load configuration from database\n    await this.loadConfiguration();\n    \n    // Start metric evaluation\n    this.startEvaluation();\n    \n    // Clean up old metrics periodically\n    setInterval(() => this.cleanupOldMetrics(), 60 * 60 * 1000); // Every hour\n  }\n\n  /**\n   * Record a metric\n   */\n  async recordMetric(metric: Metric): Promise<void> {\n    const key = this.getMetricKey(metric.name, metric.labels);\n    \n    if (!this.metrics.has(key)) {\n      this.metrics.set(key, []);\n    }\n    \n    const metrics = this.metrics.get(key)!;\n    metrics.push({\n      ...metric,\n      timestamp: metric.timestamp || new Date(),\n    });\n    \n    // Emit metric event\n    this.emit('metric', metric);\n    \n    // Check if this is a security-related metric\n    if (this.isSecurityMetric(metric.name)) {\n      await this.handleSecurityMetric(metric);\n    }\n  }\n\n  /**\n   * Record multiple metrics in batch\n   */\n  async recordMetrics(metrics: Metric[]): Promise<void> {\n    await Promise.all(metrics.map(metric => this.recordMetric(metric)));\n  }\n\n  /**\n   * Get metrics for a specific name and time range\n   */\n  getMetrics(\n    name: string,\n    labels?: Record<string, string>,\n    startTime?: Date,\n    endTime?: Date\n  ): Metric[] {\n    const key = this.getMetricKey(name, labels);\n    const metrics = this.metrics.get(key) || [];\n    \n    if (!startTime && !endTime) {\n      return metrics;\n    }\n    \n    const start = startTime?.getTime() || 0;\n    const end = endTime?.getTime() || Date.now();\n    \n    return metrics.filter(m => {\n      const time = m.timestamp!.getTime();\n      return time >= start && time <= end;\n    });\n  }\n\n  /**\n   * Create or update an alert rule\n   */\n  async setAlertRule(rule: AlertRule): Promise<void> {\n    this.alertRules.set(rule.id, rule);\n    \n    // Store in database\n    const { error } = await supabaseAdmin\n      .from('alert_rules')\n      .upsert({\n        id: rule.id,\n        name: rule.name,\n        description: rule.description,\n        metric: rule.metric,\n        condition: rule.condition,\n        threshold: rule.threshold,\n        duration: rule.duration,\n        severity: rule.severity,\n        channels: rule.channels,\n        enabled: rule.enabled,\n        metadata: rule.metadata,\n      });\n    \n    if (error) {\n      console.error('Failed to save alert rule:', error);\n    }\n    \n    // Audit log\n    await auditService.log({\n      type: AuditEventType.SYSTEM_CONFIG_CHANGED,\n      severity: AuditEventSeverity.INFO,\n      actor: { type: 'system', id: 'monitoring-service' },\n      context: {},\n      metadata: {\n        action: 'alert_rule_updated',\n        ruleId: rule.id,\n        ruleName: rule.name,\n      },\n      result: 'success',\n    });\n  }\n\n  /**\n   * Delete an alert rule\n   */\n  async deleteAlertRule(ruleId: string): Promise<void> {\n    this.alertRules.delete(ruleId);\n    \n    const { error } = await supabaseAdmin\n      .from('alert_rules')\n      .delete()\n      .eq('id', ruleId);\n    \n    if (error) {\n      console.error('Failed to delete alert rule:', error);\n    }\n  }\n\n  /**\n   * Record a security event\n   */\n  async recordSecurityEvent(event: SecurityEvent): Promise<void> {\n    this.securityEvents.push(event);\n    \n    // Keep only recent events (last 1000)\n    if (this.securityEvents.length > 1000) {\n      this.securityEvents = this.securityEvents.slice(-1000);\n    }\n    \n    // Store in database\n    const { error } = await supabaseAdmin\n      .from('security_events')\n      .insert({\n        id: event.id,\n        type: event.type,\n        severity: event.severity,\n        source: event.source,\n        user_id: event.userId,\n        ip: event.ip,\n        user_agent: event.userAgent,\n        details: event.details,\n        timestamp: event.timestamp,\n        handled: event.handled,\n      });\n    \n    if (error) {\n      console.error('Failed to store security event:', error);\n    }\n    \n    // Emit security event\n    this.emit('security-event', event);\n    \n    // Check if alert should be triggered\n    if (event.severity === AlertSeverity.CRITICAL && !event.handled) {\n      await this.createSecurityAlert(event);\n    }\n  }\n\n  /**\n   * Update health check status\n   */\n  async updateHealthCheck(check: HealthCheck): Promise<void> {\n    this.healthChecks.set(check.service, check);\n    \n    // Check if service is unhealthy\n    if (check.status === 'unhealthy') {\n      await this.createHealthAlert(check);\n    }\n  }\n\n  /**\n   * Get monitoring dashboard data\n   */\n  async getDashboard(): Promise<MonitoringDashboard> {\n    const now = new Date();\n    const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);\n    \n    // Calculate request metrics\n    const requestMetrics = this.getMetrics('http_requests_total', undefined, oneHourAgo);\n    const successMetrics = this.getMetrics('http_requests_total', { status: 'success' }, oneHourAgo);\n    const failureMetrics = this.getMetrics('http_requests_total', { status: 'failure' }, oneHourAgo);\n    \n    const totalRequests = requestMetrics.reduce((sum, m) => sum + m.value, 0);\n    const successRequests = successMetrics.reduce((sum, m) => sum + m.value, 0);\n    const failureRequests = failureMetrics.reduce((sum, m) => sum + m.value, 0);\n    const requestRate = totalRequests / 60; // per minute\n    \n    // Calculate security metrics\n    const loginAttempts = this.getMetrics('login_attempts_total', undefined, oneHourAgo)\n      .reduce((sum, m) => sum + m.value, 0);\n    const failedLogins = this.getMetrics('failed_logins_total', undefined, oneHourAgo)\n      .reduce((sum, m) => sum + m.value, 0);\n    const mfaVerifications = this.getMetrics('mfa_verifications_total', undefined, oneHourAgo)\n      .reduce((sum, m) => sum + m.value, 0);\n    const suspiciousActivities = this.securityEvents\n      .filter(e => e.timestamp > oneHourAgo && e.severity === AlertSeverity.WARNING)\n      .length;\n    \n    // Calculate performance metrics\n    const responseTimeMetrics = this.getMetrics('http_response_time_ms', undefined, oneHourAgo);\n    const responseTimes = responseTimeMetrics.map(m => m.value).sort((a, b) => a - b);\n    \n    const avgResponseTime = responseTimes.length > 0\n      ? responseTimes.reduce((sum, t) => sum + t, 0) / responseTimes.length\n      : 0;\n    const p95ResponseTime = responseTimes.length > 0\n      ? responseTimes[Math.floor(responseTimes.length * 0.95)]\n      : 0;\n    const p99ResponseTime = responseTimes.length > 0\n      ? responseTimes[Math.floor(responseTimes.length * 0.99)]\n      : 0;\n    const errorRate = totalRequests > 0 ? (failureRequests / totalRequests) * 100 : 0;\n    \n    // Get system metrics (would typically come from system monitoring)\n    const cpuUsage = this.getLatestMetricValue('system_cpu_usage_percent') || 0;\n    const memoryUsage = this.getLatestMetricValue('system_memory_usage_percent') || 0;\n    const diskUsage = this.getLatestMetricValue('system_disk_usage_percent') || 0;\n    const activeConnections = this.getLatestMetricValue('active_connections') || 0;\n    \n    return {\n      metrics: {\n        requests: {\n          total: totalRequests,\n          success: successRequests,\n          failure: failureRequests,\n          rate: requestRate,\n        },\n        security: {\n          loginAttempts,\n          failedLogins,\n          mfaVerifications,\n          suspiciousActivities,\n        },\n        performance: {\n          avgResponseTime,\n          p95ResponseTime,\n          p99ResponseTime,\n          errorRate,\n        },\n        system: {\n          cpuUsage,\n          memoryUsage,\n          diskUsage,\n          activeConnections,\n        },\n      },\n      alerts: Array.from(this.alerts.values()).filter(a => !a.resolved),\n      healthChecks: Array.from(this.healthChecks.values()),\n      recentEvents: this.securityEvents.slice(-10),\n    };\n  }\n\n  /**\n   * Configure notifications\n   */\n  async setNotificationConfig(config: NotificationConfig): Promise<void> {\n    this.notificationConfig = config;\n    \n    // Store in database\n    const { error } = await supabaseAdmin\n      .from('notification_configs')\n      .upsert({\n        id: 'default',\n        config,\n        updated_at: new Date().toISOString(),\n      });\n    \n    if (error) {\n      console.error('Failed to save notification config:', error);\n    }\n  }\n\n  /**\n   * Start metric evaluation loop\n   */\n  private startEvaluation(): void {\n    if (this.evaluationInterval) {\n      clearInterval(this.evaluationInterval);\n    }\n    \n    // Evaluate metrics every 30 seconds\n    this.evaluationInterval = setInterval(() => {\n      this.evaluateAlertRules();\n    }, 30 * 1000);\n  }\n\n  /**\n   * Evaluate all alert rules\n   */\n  private async evaluateAlertRules(): Promise<void> {\n    for (const [ruleId, rule] of this.alertRules) {\n      if (!rule.enabled) continue;\n      \n      try {\n        await this.evaluateRule(rule);\n      } catch (error) {\n        console.error(`Failed to evaluate rule ${ruleId}:`, error);\n      }\n    }\n  }\n\n  /**\n   * Evaluate a single alert rule\n   */\n  private async evaluateRule(rule: AlertRule): Promise<void> {\n    const now = new Date();\n    const duration = rule.duration || 0;\n    const startTime = new Date(now.getTime() - duration * 1000);\n    \n    const metrics = this.getMetrics(rule.metric, undefined, startTime);\n    if (metrics.length === 0) return;\n    \n    // Calculate the current value based on the metrics\n    const currentValue = this.calculateMetricValue(metrics);\n    \n    // Check if condition is met\n    const conditionMet = this.checkCondition(currentValue, rule.condition, rule.threshold);\n    \n    const existingAlert = Array.from(this.alerts.values())\n      .find(a => a.name === rule.name && !a.resolved);\n    \n    if (conditionMet && !existingAlert) {\n      // Create new alert\n      await this.createAlert(rule, currentValue);\n    } else if (!conditionMet && existingAlert) {\n      // Resolve existing alert\n      await this.resolveAlert(existingAlert.id);\n    }\n  }\n\n  /**\n   * Calculate metric value from multiple data points\n   */\n  private calculateMetricValue(metrics: Metric[]): number {\n    if (metrics.length === 0) return 0;\n    \n    const values = metrics.map(m => m.value);\n    const type = metrics[0].type;\n    \n    switch (type) {\n      case MetricType.COUNTER:\n      case MetricType.GAUGE:\n        // Use the latest value\n        return values[values.length - 1];\n      \n      case MetricType.HISTOGRAM:\n      case MetricType.SUMMARY:\n        // Use average\n        return values.reduce((sum, v) => sum + v, 0) / values.length;\n      \n      default:\n        return values[values.length - 1];\n    }\n  }\n\n  /**\n   * Check if condition is met\n   */\n  private checkCondition(value: number, condition: string, threshold: number): boolean {\n    switch (condition) {\n      case 'gt': return value > threshold;\n      case 'gte': return value >= threshold;\n      case 'lt': return value < threshold;\n      case 'lte': return value <= threshold;\n      case 'eq': return value === threshold;\n      case 'neq': return value !== threshold;\n      default: return false;\n    }\n  }\n\n  /**\n   * Create a new alert\n   */\n  private async createAlert(rule: AlertRule, currentValue: number): Promise<void> {\n    const alert: Alert = {\n      id: crypto.randomUUID(),\n      name: rule.name,\n      severity: rule.severity,\n      message: `Alert: ${rule.name} - Current value (${currentValue}) ${rule.condition} threshold (${rule.threshold})`,\n      details: {\n        rule: rule.id,\n        currentValue,\n        threshold: rule.threshold,\n        condition: rule.condition,\n      },\n      metric: rule.metric,\n      threshold: rule.threshold,\n      currentValue,\n      timestamp: new Date(),\n      resolved: false,\n    };\n    \n    this.alerts.set(alert.id, alert);\n    \n    // Store in database\n    await supabaseAdmin\n      .from('alerts')\n      .insert({\n        id: alert.id,\n        name: alert.name,\n        severity: alert.severity,\n        message: alert.message,\n        details: alert.details,\n        metric: alert.metric,\n        threshold: alert.threshold,\n        current_value: alert.currentValue,\n        timestamp: alert.timestamp,\n        resolved: alert.resolved,\n      });\n    \n    // Send notifications\n    await this.sendAlertNotifications(alert, rule.channels);\n    \n    // Emit alert event\n    this.emit('alert', alert);\n    \n    // Audit log\n    await auditService.log({\n      type: AuditEventType.SYSTEM_ERROR,\n      severity: this.mapAlertSeverityToAudit(alert.severity),\n      actor: { type: 'system', id: 'monitoring-service' },\n      context: {},\n      metadata: {\n        action: 'alert_triggered',\n        alertId: alert.id,\n        alertName: alert.name,\n        severity: alert.severity,\n        currentValue,\n        threshold: rule.threshold,\n      },\n      result: 'success',\n    });\n  }\n\n  /**\n   * Resolve an alert\n   */\n  private async resolveAlert(alertId: string): Promise<void> {\n    const alert = this.alerts.get(alertId);\n    if (!alert) return;\n    \n    alert.resolved = true;\n    alert.resolvedAt = new Date();\n    \n    // Update in database\n    await supabaseAdmin\n      .from('alerts')\n      .update({\n        resolved: true,\n        resolved_at: alert.resolvedAt,\n      })\n      .eq('id', alertId);\n    \n    // Emit resolved event\n    this.emit('alert-resolved', alert);\n  }\n\n  /**\n   * Create security alert\n   */\n  private async createSecurityAlert(event: SecurityEvent): Promise<void> {\n    const alert: Alert = {\n      id: crypto.randomUUID(),\n      name: 'Security Alert',\n      severity: event.severity,\n      message: `Security event: ${event.type} from ${event.source}`,\n      details: {\n        eventId: event.id,\n        eventType: event.type,\n        source: event.source,\n        userId: event.userId,\n        ip: event.ip,\n        details: event.details,\n      },\n      timestamp: new Date(),\n      resolved: false,\n    };\n    \n    this.alerts.set(alert.id, alert);\n    \n    // Send notifications for critical security alerts\n    await this.sendAlertNotifications(alert, [\n      AlertChannel.EMAIL,\n      AlertChannel.SMS,\n      AlertChannel.SLACK,\n    ]);\n  }\n\n  /**\n   * Create health alert\n   */\n  private async createHealthAlert(check: HealthCheck): Promise<void> {\n    const alert: Alert = {\n      id: crypto.randomUUID(),\n      name: 'Service Health Alert',\n      severity: AlertSeverity.ERROR,\n      message: `Service ${check.service} is ${check.status}`,\n      details: {\n        service: check.service,\n        status: check.status,\n        responseTime: check.responseTime,\n        lastCheck: check.lastCheck,\n        details: check.details,\n      },\n      timestamp: new Date(),\n      resolved: false,\n    };\n    \n    this.alerts.set(alert.id, alert);\n    \n    // Send notifications\n    await this.sendAlertNotifications(alert, [\n      AlertChannel.EMAIL,\n      AlertChannel.SLACK,\n      AlertChannel.PAGERDUTY,\n    ]);\n  }\n\n  /**\n   * Send alert notifications\n   */\n  private async sendAlertNotifications(\n    alert: Alert,\n    channels: AlertChannel[]\n  ): Promise<void> {\n    for (const channel of channels) {\n      try {\n        await this.sendNotification(channel, alert);\n      } catch (error) {\n        console.error(`Failed to send ${channel} notification:`, error);\n      }\n    }\n  }\n\n  /**\n   * Send notification through specific channel\n   */\n  private async sendNotification(\n    channel: AlertChannel,\n    alert: Alert\n  ): Promise<void> {\n    switch (channel) {\n      case AlertChannel.EMAIL:\n        await this.sendEmailNotification(alert);\n        break;\n      \n      case AlertChannel.SMS:\n        await this.sendSMSNotification(alert);\n        break;\n      \n      case AlertChannel.SLACK:\n        await this.sendSlackNotification(alert);\n        break;\n      \n      case AlertChannel.PAGERDUTY:\n        await this.sendPagerDutyNotification(alert);\n        break;\n      \n      case AlertChannel.WEBHOOK:\n        await this.sendWebhookNotification(alert);\n        break;\n    }\n  }\n\n  /**\n   * Send email notification\n   */\n  private async sendEmailNotification(alert: Alert): Promise<void> {\n    if (!this.notificationConfig.email?.enabled) return;\n    \n    const { emailMFAService } = await import('@/lib/auth/mfa/email');\n    \n    for (const recipient of this.notificationConfig.email.recipients) {\n      // Reuse email service for sending alerts\n      console.log('📧 Alert Email:', {\n        to: recipient,\n        subject: `[${alert.severity.toUpperCase()}] ${alert.name}`,\n        message: alert.message,\n      });\n    }\n  }\n\n  /**\n   * Send SMS notification\n   */\n  private async sendSMSNotification(alert: Alert): Promise<void> {\n    if (!this.notificationConfig.sms?.enabled) return;\n    \n    const { smsMFAService } = await import('@/lib/auth/mfa/sms');\n    \n    for (const recipient of this.notificationConfig.sms.recipients) {\n      // Reuse SMS service for sending alerts\n      console.log('📱 Alert SMS:', {\n        to: recipient,\n        message: `[${alert.severity.toUpperCase()}] ${alert.name}: ${alert.message}`,\n      });\n    }\n  }\n\n  /**\n   * Send Slack notification\n   */\n  private async sendSlackNotification(alert: Alert): Promise<void> {\n    if (!this.notificationConfig.slack?.enabled) return;\n    \n    const payload = {\n      channel: this.notificationConfig.slack.channel,\n      username: this.notificationConfig.slack.username || 'blipee OS Monitoring',\n      icon_emoji: ':warning:',\n      attachments: [{\n        color: this.getAlertColor(alert.severity),\n        title: alert.name,\n        text: alert.message,\n        fields: [\n          {\n            title: 'Severity',\n            value: alert.severity.toUpperCase(),\n            short: true,\n          },\n          {\n            title: 'Time',\n            value: alert.timestamp.toISOString(),\n            short: true,\n          },\n        ],\n        footer: 'blipee OS Monitoring',\n        ts: Math.floor(alert.timestamp.getTime() / 1000),\n      }],\n    };\n    \n    // Send to Slack webhook\n    console.log('💬 Slack Alert:', payload);\n  }\n\n  /**\n   * Send PagerDuty notification\n   */\n  private async sendPagerDutyNotification(alert: Alert): Promise<void> {\n    if (!this.notificationConfig.pagerduty?.enabled) return;\n    \n    const event = {\n      routing_key: this.notificationConfig.pagerduty.integrationKey,\n      event_action: 'trigger',\n      dedup_key: alert.id,\n      payload: {\n        summary: alert.message,\n        severity: this.mapAlertSeverityToPagerDuty(alert.severity),\n        source: 'blipee-os',\n        component: 'monitoring',\n        group: alert.name,\n        custom_details: alert.details,\n      },\n    };\n    \n    // Send to PagerDuty\n    console.log('🚨 PagerDuty Alert:', event);\n  }\n\n  /**\n   * Send webhook notification\n   */\n  private async sendWebhookNotification(alert: Alert): Promise<void> {\n    if (!this.notificationConfig.webhook?.enabled) return;\n    \n    const payload = {\n      alert,\n      timestamp: new Date().toISOString(),\n      source: 'blipee-os-monitoring',\n    };\n    \n    // Sign payload if secret is configured\n    if (this.notificationConfig.webhook.secret) {\n      const crypto = await import('crypto');\n      const signature = crypto\n        .createHmac('sha256', this.notificationConfig.webhook.secret)\n        .update(JSON.stringify(payload))\n        .digest('hex');\n      \n      // Add signature to headers\n      console.log('🔗 Webhook Alert with signature:', signature);\n    }\n    \n    console.log('🔗 Webhook Alert:', {\n      url: this.notificationConfig.webhook.url,\n      payload,\n    });\n  }\n\n  /**\n   * Get metric key for storage\n   */\n  private getMetricKey(name: string, labels?: Record<string, string>): string {\n    if (!labels) return name;\n    \n    const labelStr = Object.entries(labels)\n      .sort(([a], [b]) => a.localeCompare(b))\n      .map(([k, v]) => `${k}=${v}`)\n      .join(',');\n    \n    return `${name}{${labelStr}}`;\n  }\n\n  /**\n   * Check if metric is security-related\n   */\n  private isSecurityMetric(name: string): boolean {\n    const securityMetrics = [\n      'login_attempts',\n      'failed_logins',\n      'mfa_verifications',\n      'suspicious_activity',\n      'rate_limit_exceeded',\n      'unauthorized_access',\n    ];\n    \n    return securityMetrics.some(m => name.includes(m));\n  }\n\n  /**\n   * Handle security metric\n   */\n  private async handleSecurityMetric(metric: Metric): Promise<void> {\n    // Check for anomalies\n    const recentMetrics = this.getMetrics(\n      metric.name,\n      metric.labels,\n      new Date(Date.now() - 5 * 60 * 1000) // Last 5 minutes\n    );\n    \n    if (recentMetrics.length < 2) return;\n    \n    const values = recentMetrics.map(m => m.value);\n    const avg = values.reduce((sum, v) => sum + v, 0) / values.length;\n    const stdDev = Math.sqrt(\n      values.reduce((sum, v) => sum + Math.pow(v - avg, 2), 0) / values.length\n    );\n    \n    // Check if current value is an anomaly (3 standard deviations)\n    if (Math.abs(metric.value - avg) > 3 * stdDev) {\n      await this.recordSecurityEvent({\n        id: crypto.randomUUID(),\n        type: 'metric_anomaly',\n        severity: AlertSeverity.WARNING,\n        source: 'monitoring-service',\n        details: {\n          metric: metric.name,\n          value: metric.value,\n          average: avg,\n          stdDev,\n          labels: metric.labels,\n        },\n        timestamp: new Date(),\n        handled: false,\n      });\n    }\n  }\n\n  /**\n   * Get latest value for a metric\n   */\n  private getLatestMetricValue(name: string, labels?: Record<string, string>): number | null {\n    const metrics = this.getMetrics(name, labels);\n    return metrics.length > 0 ? metrics[metrics.length - 1].value : null;\n  }\n\n  /**\n   * Clean up old metrics\n   */\n  private cleanupOldMetrics(): void {\n    const cutoff = Date.now() - this.metricsRetentionMs;\n    \n    for (const [key, metrics] of this.metrics) {\n      const filtered = metrics.filter(m => m.timestamp!.getTime() > cutoff);\n      \n      if (filtered.length === 0) {\n        this.metrics.delete(key);\n      } else if (filtered.length < metrics.length) {\n        this.metrics.set(key, filtered);\n      }\n    }\n  }\n\n  /**\n   * Load configuration from database\n   */\n  private async loadConfiguration(): Promise<void> {\n    // Load alert rules\n    const { data: rules } = await supabaseAdmin\n      .from('alert_rules')\n      .select('*')\n      .eq('enabled', true);\n    \n    if (rules) {\n      for (const rule of rules) {\n        this.alertRules.set(rule.id, {\n          id: rule.id,\n          name: rule.name,\n          description: rule.description,\n          metric: rule.metric,\n          condition: rule.condition,\n          threshold: rule.threshold,\n          duration: rule.duration,\n          severity: rule.severity,\n          channels: rule.channels,\n          enabled: rule.enabled,\n          metadata: rule.metadata,\n        });\n      }\n    }\n    \n    // Load notification config\n    const { data: config } = await supabaseAdmin\n      .from('notification_configs')\n      .select('*')\n      .eq('id', 'default')\n      .single();\n    \n    if (config) {\n      this.notificationConfig = config.config;\n    }\n  }\n\n  /**\n   * Get alert color for Slack\n   */\n  private getAlertColor(severity: AlertSeverity): string {\n    switch (severity) {\n      case AlertSeverity.INFO: return '#36a64f';\n      case AlertSeverity.WARNING: return '#ff9900';\n      case AlertSeverity.ERROR: return '#ff0000';\n      case AlertSeverity.CRITICAL: return '#8b0000';\n    }\n  }\n\n  /**\n   * Map alert severity to PagerDuty severity\n   */\n  private mapAlertSeverityToPagerDuty(severity: AlertSeverity): string {\n    switch (severity) {\n      case AlertSeverity.INFO: return 'info';\n      case AlertSeverity.WARNING: return 'warning';\n      case AlertSeverity.ERROR: return 'error';\n      case AlertSeverity.CRITICAL: return 'critical';\n    }\n  }\n\n  /**\n   * Map alert severity to audit severity\n   */\n  private mapAlertSeverityToAudit(severity: AlertSeverity): AuditEventSeverity {\n    switch (severity) {\n      case AlertSeverity.INFO: return AuditEventSeverity.INFO;\n      case AlertSeverity.WARNING: return AuditEventSeverity.WARNING;\n      case AlertSeverity.ERROR: return AuditEventSeverity.ERROR;\n      case AlertSeverity.CRITICAL: return AuditEventSeverity.CRITICAL;\n    }\n  }\n}\n\n// Export singleton instance\nexport const monitoringService = new MonitoringService();"],"names":["MonitoringService","monitoringService","EventEmitter","constructor","metrics","Map","alerts","alertRules","healthChecks","securityEvents","notificationConfig","metricsRetentionMs","evaluationInterval","initialize","loadConfiguration","startEvaluation","setInterval","cleanupOldMetrics","recordMetric","metric","key","getMetricKey","name","labels","has","set","get","push","timestamp","Date","emit","isSecurityMetric","handleSecurityMetric","recordMetrics","Promise","all","map","getMetrics","startTime","endTime","start","getTime","end","now","filter","m","time","setAlertRule","rule","id","error","supabaseAdmin","from","upsert","description","condition","threshold","duration","severity","channels","enabled","metadata","console","auditService","log","type","AuditEventType","SYSTEM_CONFIG_CHANGED","AuditEventSeverity","INFO","actor","context","action","ruleId","ruleName","result","deleteAlertRule","delete","eq","recordSecurityEvent","event","length","slice","insert","source","user_id","userId","ip","user_agent","userAgent","details","handled","AlertSeverity","CRITICAL","createSecurityAlert","updateHealthCheck","check","service","status","createHealthAlert","getDashboard","oneHourAgo","requestMetrics","undefined","successMetrics","failureMetrics","totalRequests","reduce","sum","value","successRequests","failureRequests","requestRate","loginAttempts","failedLogins","mfaVerifications","suspiciousActivities","e","WARNING","responseTimeMetrics","responseTimes","sort","a","b","avgResponseTime","t","p95ResponseTime","Math","floor","p99ResponseTime","errorRate","cpuUsage","getLatestMetricValue","memoryUsage","diskUsage","activeConnections","requests","total","success","failure","rate","security","performance","system","Array","values","resolved","recentEvents","setNotificationConfig","config","updated_at","toISOString","clearInterval","evaluateAlertRules","evaluateRule","currentValue","calculateMetricValue","conditionMet","checkCondition","existingAlert","find","createAlert","resolveAlert","MetricType","COUNTER","GAUGE","HISTOGRAM","SUMMARY","v","alert","crypto","randomUUID","message","current_value","sendAlertNotifications","SYSTEM_ERROR","mapAlertSeverityToAudit","alertId","alertName","resolvedAt","update","resolved_at","eventId","eventType","AlertChannel","EMAIL","SMS","SLACK","ERROR","responseTime","lastCheck","PAGERDUTY","channel","sendNotification","sendEmailNotification","sendSMSNotification","sendSlackNotification","sendPagerDutyNotification","WEBHOOK","sendWebhookNotification","email","emailMFAService","recipient","recipients","to","subject","toUpperCase","sms","smsMFAService","slack","payload","username","icon_emoji","attachments","color","getAlertColor","title","text","fields","short","footer","ts","pagerduty","routing_key","integrationKey","event_action","dedup_key","summary","mapAlertSeverityToPagerDuty","component","group","custom_details","webhook","secret","signature","createHmac","JSON","stringify","digest","url","labelStr","Object","entries","localeCompare","k","join","securityMetrics","some","includes","recentMetrics","avg","stdDev","sqrt","pow","abs","average","cutoff","filtered","data","rules","select","single"],"mappings":"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"}