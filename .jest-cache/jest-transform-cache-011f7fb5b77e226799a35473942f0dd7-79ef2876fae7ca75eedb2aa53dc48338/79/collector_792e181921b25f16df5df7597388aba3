6f3adcdc7df0ced9545278fd913df6fe
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    MetricsCollector: function() {
        return MetricsCollector;
    },
    recordApiCall: function() {
        return recordApiCall;
    },
    recordAuthEvent: function() {
        return recordAuthEvent;
    },
    recordBusinessMetric: function() {
        return recordBusinessMetric;
    },
    recordCacheOperation: function() {
        return recordCacheOperation;
    },
    recordDatabaseQuery: function() {
        return recordDatabaseQuery;
    },
    recordError: function() {
        return recordError;
    },
    recordFeatureUsage: function() {
        return recordFeatureUsage;
    },
    recordHttpRequest: function() {
        return recordHttpRequest;
    },
    recordRateLimit: function() {
        return recordRateLimit;
    },
    recordSystemMetrics: function() {
        return recordSystemMetrics;
    }
});
const _types = require("./types");
const _service = require("./service");
class MetricsCollector {
    /**
   * Record HTTP request
   */ static async recordHttpRequest(method, path, statusCode, responseTime, userId) {
        // Record request count
        await _service.monitoringService.recordMetric({
            name: "http_requests_total",
            type: _types.MetricType.COUNTER,
            value: 1,
            labels: {
                method,
                path,
                status: statusCode >= 200 && statusCode < 300 ? "success" : "failure",
                statusCode: statusCode.toString()
            }
        });
        // Record response time
        await _service.monitoringService.recordMetric({
            name: "http_response_time_ms",
            type: _types.MetricType.HISTOGRAM,
            value: responseTime,
            labels: {
                method,
                path
            }
        });
        // Record active connections
        await _service.monitoringService.recordMetric({
            name: "active_connections",
            type: _types.MetricType.GAUGE,
            value: 1
        });
        // Record errors
        if (statusCode >= 400) {
            await _service.monitoringService.recordMetric({
                name: "http_errors_total",
                type: _types.MetricType.COUNTER,
                value: 1,
                labels: {
                    method,
                    path,
                    statusCode: statusCode.toString(),
                    errorType: statusCode >= 500 ? "server_error" : "client_error"
                }
            });
        }
    }
    /**
   * Record authentication event
   */ static async recordAuthEvent(event, success, method, userId) {
        const labels = {
            event,
            success: success.toString()
        };
        if (method) {
            labels.method = method;
        }
        await _service.monitoringService.recordMetric({
            name: "auth_events_total",
            type: _types.MetricType.COUNTER,
            value: 1,
            labels
        });
        // Specific metrics for monitoring
        if (event === "login") {
            await _service.monitoringService.recordMetric({
                name: "login_attempts_total",
                type: _types.MetricType.COUNTER,
                value: 1,
                labels: {
                    success: success.toString()
                }
            });
            if (!success) {
                await _service.monitoringService.recordMetric({
                    name: "failed_logins_total",
                    type: _types.MetricType.COUNTER,
                    value: 1,
                    labels: method ? {
                        method
                    } : {}
                });
            }
        } else if (event === "mfa_verify") {
            await _service.monitoringService.recordMetric({
                name: "mfa_verifications_total",
                type: _types.MetricType.COUNTER,
                value: 1,
                labels: {
                    success: success.toString(),
                    method: method || "unknown"
                }
            });
        }
    }
    /**
   * Record rate limit event
   */ static async recordRateLimit(identifier, endpoint, limited) {
        if (limited) {
            await _service.monitoringService.recordMetric({
                name: "rate_limit_exceeded_total",
                type: _types.MetricType.COUNTER,
                value: 1,
                labels: {
                    endpoint,
                    identifier: identifier.substring(0, 8)
                }
            });
        }
        await _service.monitoringService.recordMetric({
            name: "rate_limit_checks_total",
            type: _types.MetricType.COUNTER,
            value: 1,
            labels: {
                endpoint,
                limited: limited.toString()
            }
        });
    }
    /**
   * Record database query
   */ static async recordDatabaseQuery(operation, table, duration, success) {
        await _service.monitoringService.recordMetric({
            name: "database_queries_total",
            type: _types.MetricType.COUNTER,
            value: 1,
            labels: {
                operation,
                table,
                success: success.toString()
            }
        });
        await _service.monitoringService.recordMetric({
            name: "database_query_duration_ms",
            type: _types.MetricType.HISTOGRAM,
            value: duration,
            labels: {
                operation,
                table
            }
        });
    }
    /**
   * Record cache operation
   */ static async recordCacheOperation(operation, hit, duration) {
        await _service.monitoringService.recordMetric({
            name: "cache_operations_total",
            type: _types.MetricType.COUNTER,
            value: 1,
            labels: {
                operation,
                hit: hit.toString()
            }
        });
        if (operation === "get") {
            await _service.monitoringService.recordMetric({
                name: hit ? "cache_hits_total" : "cache_misses_total",
                type: _types.MetricType.COUNTER,
                value: 1
            });
        }
        await _service.monitoringService.recordMetric({
            name: "cache_operation_duration_ms",
            type: _types.MetricType.HISTOGRAM,
            value: duration,
            labels: {
                operation
            }
        });
    }
    /**
   * Record external API call
   */ static async recordApiCall(service, endpoint, statusCode, duration) {
        await _service.monitoringService.recordMetric({
            name: "external_api_calls_total",
            type: _types.MetricType.COUNTER,
            value: 1,
            labels: {
                service,
                endpoint,
                success: (statusCode >= 200 && statusCode < 300).toString(),
                statusCode: statusCode.toString()
            }
        });
        await _service.monitoringService.recordMetric({
            name: "external_api_duration_ms",
            type: _types.MetricType.HISTOGRAM,
            value: duration,
            labels: {
                service,
                endpoint
            }
        });
    }
    /**
   * Record business metric
   */ static async recordBusinessMetric(name, value, labels) {
        await _service.monitoringService.recordMetric({
            name: `business_${name}`,
            type: _types.MetricType.GAUGE,
            value,
            labels
        });
    }
    /**
   * Record system metrics (should be called periodically)
   */ static async recordSystemMetrics() {
        // CPU usage (mock for now)
        const cpuUsage = Math.random() * 100;
        await _service.monitoringService.recordMetric({
            name: "system_cpu_usage_percent",
            type: _types.MetricType.GAUGE,
            value: cpuUsage
        });
        // Memory usage
        const memoryUsage = process.memoryUsage();
        const totalMemory = memoryUsage.heapTotal;
        const usedMemory = memoryUsage.heapUsed;
        const memoryPercent = usedMemory / totalMemory * 100;
        await _service.monitoringService.recordMetric({
            name: "system_memory_usage_percent",
            type: _types.MetricType.GAUGE,
            value: memoryPercent
        });
        await _service.monitoringService.recordMetric({
            name: "system_memory_usage_bytes",
            type: _types.MetricType.GAUGE,
            value: usedMemory,
            labels: {
                type: "heap_used"
            }
        });
        await _service.monitoringService.recordMetric({
            name: "system_memory_usage_bytes",
            type: _types.MetricType.GAUGE,
            value: totalMemory,
            labels: {
                type: "heap_total"
            }
        });
        // Disk usage (mock for now)
        const diskUsage = Math.random() * 100;
        await _service.monitoringService.recordMetric({
            name: "system_disk_usage_percent",
            type: _types.MetricType.GAUGE,
            value: diskUsage
        });
    }
    /**
   * Record feature usage
   */ static async recordFeatureUsage(feature, userId, metadata) {
        await _service.monitoringService.recordMetric({
            name: "feature_usage_total",
            type: _types.MetricType.COUNTER,
            value: 1,
            labels: {
                feature,
                ...metadata
            }
        });
    }
    /**
   * Record error
   */ static async recordError(errorType, errorMessage, context) {
        await _service.monitoringService.recordMetric({
            name: "errors_total",
            type: _types.MetricType.COUNTER,
            value: 1,
            labels: {
                type: errorType,
                ...context
            }
        });
        // Also record as security event if it's security-related
        const securityErrorTypes = [
            "authentication_failed",
            "authorization_failed",
            "invalid_token",
            "suspicious_activity",
            "rate_limit_exceeded"
        ];
        if (securityErrorTypes.includes(errorType)) {
            await _service.monitoringService.recordSecurityEvent({
                id: crypto.randomUUID(),
                type: errorType,
                severity: "warning",
                source: "application",
                details: {
                    message: errorMessage,
                    ...context
                },
                timestamp: new Date(),
                handled: true
            });
        }
    }
}
const { recordHttpRequest, recordAuthEvent, recordRateLimit, recordDatabaseQuery, recordCacheOperation, recordApiCall, recordBusinessMetric, recordSystemMetrics, recordFeatureUsage, recordError } = MetricsCollector;

//# sourceMappingURL=data:application/json;base64,